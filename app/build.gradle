apply plugin: 'com.android.application'
//apply (plugin: 'com.android.application')
/**
 * apply plugin: 'com.android.application',这句其实是Groovy语法糖，像Ruby和Js都有这种语法糖，apply实际上是个方法，补上括号后的脚本：apply (plugin: 'com.android.application'),
 *
 * 还有个语法糖，如果方法参数是个map类型，那么方括号可以省略，进一步还原apply([ plugin: 'com.android.application']),不理解的可以去看下Groovy的map的写法，和js一样。所以这行的意思是：apply其实是个方法，接收一个Map类型的参数。
 *
 * 总结两点：1. 方法调用，圆括号可以省略,2. 如果方法参数是个Map，方括号可以省略。
 *
 * 链接：https://www.jianshu.com/p/001abe1d8e95
 */

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.xy.mygradle"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
/**
 * Groovy语言的闭包语法
 * 看上面的dependencies 这其实是个方法调用。调用了Project的dependencies方法。只不过参数是个闭包，闭包的用法在文章开始给出了链接。我们对其进行还原一下：
 */
//dependencies({
//
//    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
//    implementation 'com.android.support:appcompat-v7:28.0.0'
//
//})

/**
 * 提示一点：如果闭包是方法的最后一个参数，那么闭包可以放在圆括号外面
 */
//dependencies() {
//    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
//    implementation 'com.android.support:appcompat-v7:28.0.0'
//}

/**
 * Getter和Setter
 * Groovy语言中的两个概念，一个是Groovy中的Bean概念，一个是Groovy闭包的Delegate机制。
 * Java程序员对JavaBeans和Getter/Setter方法肯定不陌生，被设计用来获取/设置类的属性。但在Groovy中就不用那些没用的方法了。即Groovy动态的为每一个字段都会自动生成getter和setter，并且我们可以通过像访问字段本身一样调用getter和setter。比如Gradle的Project对象有个version属性（Property）下面这两行代码执行结果是一样的:
 *
 * 链接：https://www.jianshu.com/p/001abe1d8e95
 */
println project.version
println project.getVersion()
